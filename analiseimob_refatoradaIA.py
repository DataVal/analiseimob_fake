# -*- coding: utf-8 -*-
""" An√°lise de Dados Imobili√°rios """

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import zscore

# ------------------------------ 1Ô∏è‚É£ Carregamento dos Dados ------------------------------

def carregar_dados(caminho):
    """Carrega o dataset e exibe as primeiras informa√ß√µes"""
    df = pd.read_csv(caminho)
    print("üìå Primeiras Linhas:")
    print(df.head(), "\n")
    print("üìå Informa√ß√µes Gerais:")
    print(df.info(), "\n")
    print("üìå Estat√≠sticas B√°sicas:")
    print(df.describe(), "\n")
    return df

# ------------------------------ 2Ô∏è‚É£ Limpeza de Dados ------------------------------

def limpar_dados(df):
    """Remove colunas irrelevantes e trata valores ausentes"""
    colunas_para_remover = ["CPF", "Endere√ßo do Im√≥vel"]
    df.drop(columns=colunas_para_remover, inplace=True)

    # Remover linhas com valores nulos
    df.dropna(inplace=True)

    return df

# ------------------------------ 3Ô∏è‚É£ Otimiza√ß√£o de Tipos ------------------------------

def otimizar_tipos(df):
    """Converte colunas para tipos mais eficientes e reduz o uso de mem√≥ria"""

    # Medir mem√≥ria antes
    memoria_antes = df.memory_usage(deep=True).sum() / 1024**2

    # Convers√µes num√©ricas
    colunas_int = ["√Årea do Im√≥vel (m¬≤)", "Valor do Im√≥vel", "N√∫mero de Quartos",
                   "N√∫mero de Banheiros", "Valor do Condom√≠nio", "Ano de Constru√ß√£o"]
    df[colunas_int] = df[colunas_int].astype("int32")

    # Convers√µes booleanas
    colunas_binarias = ["Tem Piscina?", "Tem Garagem?", "Tem Elevador?", "Condom√≠nio Fechado?"]
    df[colunas_binarias] = df[colunas_binarias].apply(lambda x: x.map({"Sim": True, "N√£o": False}))
    df[colunas_binarias] = df[colunas_binarias].astype("bool")

    # Convers√µes categ√≥ricas
    colunas_categoricas = ["Tipo de Im√≥vel", "Tipo de Oferta"]
    df[colunas_categoricas] = df[colunas_categoricas].astype("category")

    # Convers√£o de datas
    df["Data da √öltima Reforma"] = pd.to_datetime(df["Data da √öltima Reforma"], errors="coerce")

    # Medir mem√≥ria depois
    memoria_depois = df.memory_usage(deep=True).sum() / 1024**2
    economia = ((memoria_antes - memoria_depois) / memoria_antes) * 100
    print(f"üìâ Redu√ß√£o de mem√≥ria: {economia:.2f}%")

    return df

# ------------------------------ 4Ô∏è‚É£ Identifica√ß√£o de Outliers ------------------------------

def detectar_outliers(df, coluna):
    """Identifica outliers usando o m√©todo do IQR"""
    Q1 = df[coluna].quantile(0.25)
    Q3 = df[coluna].quantile(0.75)
    IQR = Q3 - Q1

    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR

    outliers = df[(df[coluna] < limite_inferior) | (df[coluna] > limite_superior)]
    print(f"‚ö†Ô∏è Outliers na coluna {coluna}: {outliers.shape[0]}")

    return outliers

def plotar_boxplot(df, coluna):
    """Plota um boxplot para visualizar outliers"""
    plt.figure(figsize=(10, 5))
    sns.boxplot(x=df[coluna])
    plt.title(f"Boxplot de {coluna}")
    plt.show()

# ------------------------------ 5Ô∏è‚É£ An√°lise Explorat√≥ria (EDA) ------------------------------

def analisar_precos(df):
    """Analisa a distribui√ß√£o dos pre√ßos por tipo de im√≥vel"""
    plt.figure(figsize=(12, 6))
    sns.boxplot(x="Tipo de Im√≥vel", y="Valor do Im√≥vel", data=df)
    plt.xticks(rotation=45)
    plt.title("Distribui√ß√£o dos pre√ßos por tipo de im√≥vel")
    plt.show()

    plt.figure(figsize=(12, 6))
    sns.barplot(x="Tipo de Im√≥vel", y="Valor do Im√≥vel", data=df, estimator=np.mean, errorbar=None)
    plt.xticks(rotation=45)
    plt.title("M√©dia de pre√ßos por tipo de im√≥vel")
    plt.show()

def analisar_correlacao(df):
    """Plota um heatmap para visualizar a correla√ß√£o entre vari√°veis"""
    plt.figure(figsize=(10,6))
    sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Mapa de Correla√ß√£o")
    plt.show()

def scatterplot_variaveis(df, x, y):
    """Plota um scatterplot para analisar rela√ß√µes entre vari√°veis"""
    plt.figure(figsize=(10,6))
    sns.scatterplot(x=x, y=y, data=df)
    plt.title(f"Rela√ß√£o entre {x} e {y}")
    plt.show()

# ------------------------------ 6Ô∏è‚É£ Execu√ß√£o ------------------------------

if __name__ == "__main__":
    # Caminho do dataset
    caminho_arquivo = "/content/sample_data/dados_falsos_Imobili√°rio.csv"

    # Carregamento e limpeza
    df = carregar_dados(caminho_arquivo)
    df = limpar_dados(df)

    # Otimiza√ß√£o de tipos
    df = otimizar_tipos(df)

    # Identifica√ß√£o de outliers
    outliers_valor = detectar_outliers(df, "Valor do Im√≥vel")
    plotar_boxplot(df, "Valor do Im√≥vel")

    # An√°lise Explorat√≥ria
    analisar_precos(df)
    analisar_correlacao(df)
    scatterplot_variaveis(df, "√Årea do Im√≥vel (m¬≤)", "Valor do Im√≥vel")
    scatterplot_variaveis(df, "N√∫mero de Quartos", "Valor do Im√≥vel")
